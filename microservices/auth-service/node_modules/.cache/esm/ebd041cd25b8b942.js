let express,cookieParser,description,authorizeUser,getUserInfo,registerUser,authenticateToken,validateUserCredentials;_25b‍.x([["initServer",()=>initServer]]);_25b‍.w("express",[["default",["express"],function(v){express=v}]]);_25b‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_25b‍.w("../../package.json",[["description",["description"],function(v){description=v}]]);_25b‍.w("./controller",[["authorizeUser",["authorizeUser"],function(v){authorizeUser=v}],["getUserInfo",["getUserInfo"],function(v){getUserInfo=v}],["registerUser",["registerUser"],function(v){registerUser=v}]]);_25b‍.w("./middleware/auth-middleware",[["authenticateToken",["authenticateToken"],function(v){authenticateToken=v}]]);_25b‍.w("./middleware/validate-middleware",[["validateUserCredentials",["validateUserCredentials"],function(v){validateUserCredentials=v}]]);







       function initServer() {
  const app = express();
  const port = process.env.PORT || 4000;

  app.use(express.json());
  app.use(cookieParser());

  app.post('/login', validateUserCredentials, authorizeUser);
  app.post('/register', validateUserCredentials, registerUser);
  app.get('/verify', authenticateToken, getUserInfo);

  app.listen(port, () => {
    console.log(`${description} running on port ${port}.`);
  });
}
