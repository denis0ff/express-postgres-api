let generateToken,authorizeUserQuery,insertUserQuery,selectByUsername;_680‍.x([["authorizeUser",()=>authorizeUser],["registerUser",()=>registerUser],["getUserInfo",()=>getUserInfo]]);_680‍.w("./middleware/auth-middleware",[["generateToken",["generateToken"],function(v){generateToken=v}]]);_680‍.w("./queries",[["authorizeUserQuery",["authorizeUserQuery"],function(v){authorizeUserQuery=v}],["insertUserQuery",["insertUserQuery"],function(v){insertUserQuery=v}],["selectByUsername",["selectByUsername"],function(v){selectByUsername=v}]]);






       const authorizeUser = async (req, res) => {
  try {
    const { rows } = await authorizeUserQuery(req.body);

    if (rows.length === 0) {
      return res.status(401).send('Invalid login or password');
    }

    const accessToken = generateToken(rows[0])

    res.cookie('accessToken', accessToken).json({ accessToken });
  } catch (err) {
    res.status(500).json(err.toString());
  }
};

       const registerUser = async (req, res) => {
  try {
    const { rows } = await selectByUsername(req.body);

    if (rows.length > 0) {
      return res.status(409).send('A user with this name already exists');
    }

    await insertUserQuery(req.body);

    const accessToken = generateToken(req.body)

    res.cookie('accessToken', accessToken).json({ accessToken });
  } catch (err) {
    res.status(500).json(err.toString());
  }
};

       const getUserInfo = async (req, res) => {
  res.json({ username: req.user.username });
};
